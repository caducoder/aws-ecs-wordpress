AWSTemplateFormatVersion: "2010-09-09"
Description: Implantacao de WordPress com Amazon ECS usando AWS CloudFormation

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select a VPC that allows instances to access the Internet.
  SubnetId:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select at least two subnets in your selected VPC.
  ClusterNameParameter:
    Description: Enter the name for the ecs cluster.
    Type: String
  ServiceNameParameter:
    Description: Enter the name for the ecs service.
    Type: String
  DBName:
    Description: The WordPress database name
    Default: wordpressdb
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUsername:
    Description: The WordPress database admin account username
    NoEcho: 'true'
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Description: The WordPress database admin account password
    NoEcho: 'true'
    Type: String
    MinLength: '8'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MaxContainers:
    Description: The max numbers of containers to scale to
    Type: Number
 
Resources:
  #-------------- Elastic Container Service --------------#
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 
        Ref: ClusterNameParameter

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  ## definição de tarefa: contém as configurações do container
  ECSTaskDefinition: 
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: wordpress
          Image: 'bitnami/wordpress'
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          MountPoints:
            - ContainerPath: "/bitnami/wordpress"
              SourceVolume: wordpress
          Environment:
            - Name: MARIADB_HOST
              Value: !GetAtt WordpressDB.Endpoint.Address
            - Name: WORDPRESS_DATABASE_USER
              Value: !Ref DBUsername
            - Name: WORDPRESS_DATABASE_PASSWORD
              Value: !Ref DBPassword
            - Name: WORDPRESS_DATABASE_NAME
              Value: !Ref DBName
            - Name: PHP_MEMORY_LIMIT
              Value: 512M
            - Name: enabled
              Value: 'false'
      Volumes:
        - Name: wordpress
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref AccessPoint
              IAM: DISABLED

  ## serviço: define quantas instâncias irão existir em um cluster
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetId
      ServiceName: 
        Ref: ServiceNameParameter
      Cluster: 
        Ref: ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
  
  ## 
  AutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: !Ref MaxContainers
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  #-------------- Elastic FileSystem --------------#
  ## armazenamento para os dados do wordpress
  FileSystem: 
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: Wordpress-demo
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  
  ## recurso que indica o ponto de acesso ao filesystem
  AccessPoint: 
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystem
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: "/wordpress"

  #-------------- Relational Database System --------------#
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: wp-db-subnet-group
      DBSubnetGroupDescription: wp-db-subnet-group
      SubnetIds: !Ref SubnetId

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VpcId
      GroupName: Wordpress-Demo-RDS-SG
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: 3306
        ToPort: 3306
        CidrIp: 10.0.0.0/16
  
  ## banco de dados mysql para o wordpress
  WordpressDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: wp-database
      DBInstanceClass: db.t3.micro
      DBName: !Ref DBName
      Engine: mysql
      MasterUserPassword: !Ref DBPassword
      MasterUsername: !Ref DBUsername
      PubliclyAccessible: false
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  #-------------- Load Balancer --------------#
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: LoadBalancer Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress: # permite que qualquer um acesse
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ## distribuidor de tráfego
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetId
      SecurityGroups: 
      - !Ref ALBSecurityGroup
      Type: application

  ## recurso que indica o destino que receberá o tráfego distribuído
  LBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip

  ## recurso que indica a porta em que o LB irá escutar
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
        LoadBalancerArn: !Ref PublicLoadBalancer
        Protocol: "HTTP"
        Port: 80
        DefaultActions:
          - Type: forward
            ForwardConfig:
              TargetGroups:
                - TargetGroupArn: !Ref LBTargetGroup
                  Weight: 1

Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - PublicLoadBalancer
          - DNSName
        - "/wordpress"
    Description: WordPress Website